input:
  http_server:
    address: ":8888"
    path: /telemetry
    allowed_verbs: [ GET, POST ]


pipeline:
  threads: 4
  processors:
    - mapping: |
        root = this
        root.vehicle_alerts = []
        root.high_risk_behavior = []

        if this.speed > 85 {
          root.high_risk_behavior = root.high_risk_behavior.append("SPEED")
        } 

        if this.airbag > 95 {
          root.vehicle_alerts = root.vehicle_alerts.append("AIRBAG")
        } 

        if this.low_tire_pressure_alert < 25 {
          root.vehicle_alerts = root.vehicle_alerts.append("LOW TIRE PRESSURE")
        } 

        if this.tail_light_alert > 75 {
          root.vehicle_alerts = root.vehicle_alerts.append("TAIL LIGHT OUT")
        }

buffer:
  memory:
    # Max in-flight data before applying backpressure
    limit: 524288000 # 50MiB
    # Batching policy, influences how large the generated files sent to Snowflake are
    batch_policy:
      enabled: true
      count: 1000
      byte_size: 33554432 # 32MiB
      period: "3s"


output:
  switch:
      cases:
        - check: this.vehicle_alerts.length() > 0
          output:
            redpanda:
              seed_brokers: [ ${REDPANDA_BROKERS} ]
              topic: vehicle_alert
          continue: true

        - check: this.high_risk_behavior.length() > 0
          output:
            redpanda:
              seed_brokers: [ ${REDPANDA_BROKERS} ]
              topic: vehicle_high_risk_behavior
          continue: true

        - output:
            redpanda:
              seed_brokers: [ ${REDPANDA_BROKERS} ]
              topic: vehicle_telemetry

logger:
  level: DEBUG
  format: logfmt
  add_timestamp: true
  timestamp_name: ts
